#version 330

layout(location=0) in vec3 position;
layout(location=1) in vec2 texcoord;
layout(location=2) in vec3 normal;
layout(location=3) in vec3 tangent;
layout(location=4) in vec3 bitangent;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 world;

out vec2 f_texcoord;
out vec3 f_normal;
out vec3 f_vert;
out mat3 f_TBN;

void main() {
	gl_Position = projection * view * world * vec4(position, 1);
	vec4 vert =  world * vec4(position, 1);
	f_vert = vec3(vert) / vert.w;
	f_texcoord = texcoord;
	f_normal = vec3(world * vec4(normal, 0));
	vec3 T = normalize(vec3(world * vec4(tangent, 0.0)));
	vec3 B = normalize(vec3(world * vec4(bitangent, 0.0)));
	vec3 N = normalize(vec3(world * vec4(normal, 0.0)));
	mat3 TBN = mat3(T, B, N);
	f_TBN = TBN;
}
